version: '3.8'
services:
  
  producer:
    build:
      context: producer
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - rabbitmq
      - postgres
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/main_app_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qwerty
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_REDIS_HOST: redis
    networks:
      - backend

  postgres:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=main_app_db
      - POSTGRES_PASSWORD=qwerty
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "5673:5673"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 60s
      timeout: 60s
      retries: 5
    networks:
      - backend

  consumer_1:
    build:
      context: consumer_1
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - producer
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    networks:
      - backend

  consumer_2:
    build:
      context: consumer_2
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - producer
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    networks:
      - backend

volumes:
  db-data:
  redis-data:

networks:
  backend: